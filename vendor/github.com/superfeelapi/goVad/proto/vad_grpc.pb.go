// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: vad.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VadClient is the client API for Vad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VadClient interface {
	Register(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Response, error)
	CheckRoomStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Response, error)
	Send(ctx context.Context, opts ...grpc.CallOption) (Vad_SendClient, error)
}

type vadClient struct {
	cc grpc.ClientConnInterface
}

func NewVadClient(cc grpc.ClientConnInterface) VadClient {
	return &vadClient{cc}
}

func (c *vadClient) Register(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/vad.Vad/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vadClient) CheckRoomStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/vad.Vad/CheckRoomStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vadClient) Send(ctx context.Context, opts ...grpc.CallOption) (Vad_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vad_ServiceDesc.Streams[0], "/vad.Vad/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &vadSendClient{stream}
	return x, nil
}

type Vad_SendClient interface {
	Send(*Data) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type vadSendClient struct {
	grpc.ClientStream
}

func (x *vadSendClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vadSendClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VadServer is the server API for Vad service.
// All implementations must embed UnimplementedVadServer
// for forward compatibility
type VadServer interface {
	Register(context.Context, *Room) (*Response, error)
	CheckRoomStatus(context.Context, *Status) (*Response, error)
	Send(Vad_SendServer) error
	mustEmbedUnimplementedVadServer()
}

// UnimplementedVadServer must be embedded to have forward compatible implementations.
type UnimplementedVadServer struct {
}

func (UnimplementedVadServer) Register(context.Context, *Room) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVadServer) CheckRoomStatus(context.Context, *Status) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRoomStatus not implemented")
}
func (UnimplementedVadServer) Send(Vad_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedVadServer) mustEmbedUnimplementedVadServer() {}

// UnsafeVadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VadServer will
// result in compilation errors.
type UnsafeVadServer interface {
	mustEmbedUnimplementedVadServer()
}

func RegisterVadServer(s grpc.ServiceRegistrar, srv VadServer) {
	s.RegisterService(&Vad_ServiceDesc, srv)
}

func _Vad_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VadServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vad.Vad/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VadServer).Register(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vad_CheckRoomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VadServer).CheckRoomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vad.Vad/CheckRoomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VadServer).CheckRoomStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vad_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VadServer).Send(&vadSendServer{stream})
}

type Vad_SendServer interface {
	Send(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type vadSendServer struct {
	grpc.ServerStream
}

func (x *vadSendServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vadSendServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Vad_ServiceDesc is the grpc.ServiceDesc for Vad service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vad_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vad.Vad",
	HandlerType: (*VadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Vad_Register_Handler,
		},
		{
			MethodName: "CheckRoomStatus",
			Handler:    _Vad_CheckRoomStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Vad_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vad.proto",
}
